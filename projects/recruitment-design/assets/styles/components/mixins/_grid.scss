@function grid-sized-ratio($index) {
  $accuracy: 100000;
  $ratio: round($index * $accuracy / $grid-columns) / $accuracy;
  @return $ratio;
}

@function grid-sized-vw($index) {
  @return #{grid-sized-ratio($index)*100}vw;
}

@function grid-sized-max($index) {
  // TODO : extract integer from variable with unity $container-max-width
  @return #{round(1600 * grid-sized-ratio($index) * 100) / 100}px;
}

@function grid-sized($index, $max: false) {
  @if $index == auto {
    @return auto;
  }

  $ratio: grid-sized-ratio($index);

  @if $ratio == 0 {
    @return 0;
  } @else if $max {
    @return grid-sized-max($index);
  } @else {
    @return grid-sized-vw($index);
  }
}

// Set property size depending on grid size ratio
@mixin make-grid-sized-prop($prop, $index, $breakpoint: 'xs') {
  $min: breakpoint-min($breakpoint);
  $props: if(type-of($prop) == 'string', [$prop], $prop);

  // Set defaut 'xs' mobile or selected breakpoint property.
  @include media-breakpoint-up($breakpoint) {
    @each $prop in $props {
      #{$prop}: grid-sized($index);
    }
  }

  // Set max property for max stage width
  @if $min == null and $index > 0 {
    @media (min-width: $container-max-width) {
      @each $prop in $props {
        #{$prop}: grid-sized($index, true);
      }
    }
  }
}

// Margin and Padding depending on grid size
@mixin make-grid-sized-gutter($prop, $indexes, $breakpoint: 'xs') {
  $min: breakpoint-min($breakpoint);

  // Set defaut 'xs' mobile or selected breakpoint property.
  @include media-breakpoint-up($breakpoint) {
    $value: '';
    @each $index in $indexes {
      $value: #{$value} grid-sized($index);
    }
    #{$prop}: #{$value};
  }

  @if $min == null {
    @media (min-width: $container-max-width) {
      $value: '';
      @each $index in $indexes {
        $value: #{$value} grid-sized($index, true);
      }
      #{$prop}: #{$value};
    }
  }
}

@mixin make-height-grid($index, $breakpoint: 'xs') {
  box-sizing: border-box;
  @include make-grid-sized-prop(('height', 'min-height', 'max-height'), $index, $breakpoint);
}

@mixin make-width-grid($index, $breakpoint: 'xs') {
  box-sizing: border-box;
  @include make-grid-sized-prop(('width', 'min-width', 'max-width'), $index, $breakpoint);
}

@mixin make-padding-grid($indexes, $breakpoint: 'xs') {
  @include make-grid-sized-gutter('padding', $indexes, $breakpoint);
}

@mixin make-margin-grid($indexes, $breakpoint: 'xs') {
  @include make-grid-sized-gutter('margin', $indexes, $breakpoint);
}




@mixin make-cover-height-grid($index, $breakpoint: 'xs') {
  box-sizing: border-box;
  $min: breakpoint-min($breakpoint);

  // Set defaut 'xs' mobile or selected breakpoint property.
  @include media-breakpoint-up($breakpoint) {
      height: calc(100% - #{grid-sized($index)});
  }

  // Set max property for max stage width
  @if $min == null and $index > 0 {
    @media (min-width: $container-max-width) {
        height: calc(100% - #{grid-sized($index, true)});
    }
  }
}
